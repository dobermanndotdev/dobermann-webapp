openapi: 3.0.3
info:
  title: dobermann/backend
  description: Dobermann's backend
  termsOfService: https://github.com/flowck/dobermann
  contact:
    email: firmino.changani@gmail.com
  license:
    name: MIT
    url: https://github.com/flowck/dobermann/LICENSE.md
  version: 0.0.1
externalDocs:
  description: https://github.com/flowck/dobermann/README.md
  url: https://github.com/flowck/dobermann
servers:
  - url: http://localhost:8080
paths:
  /monitors:
    get:
      tags:
        - Monitors
      operationId: getAllMonitors
      summary: Get all monitors in a with pagination
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllMonitorsPayload"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      tags:
        - Monitors
      operationId: createMonitor
      summary: Create a new monitor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMonitorRequest"
      responses:
        "201":
          description: CREATED
        default:
          $ref: "#/components/responses/DefaultError"
  /monitors/{monitorID}:
    get:
      tags:
        - Monitors
      operationId: getMonitorByID
      summary: Get all monitors in a with pagination
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllMonitorByIdPayload"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      tags:
        - Monitors
      operationId: toggleMonitorPause
      summary: Pause or unpause the monitor
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToggleMonitorPauseRequest"
      responses:
        "204":
          description: OK
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - Monitors
      operationId: editMonitor
      summary: Edit a monitor by id
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditMonitorRequest"
      responses:
        "200":
          description: OK
        default:
          $ref: "#/components/responses/DefaultError"
    delete:
      tags:
        - Monitors
      operationId: deleteMonitor
      summary: Delete monitor
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "204":
          description: DELETED
        default:
          $ref: "#/components/responses/DefaultError"
  /monitors/{monitorID}/stats/response-times:
    get:
      tags:
        - Monitors
      operationId: getMonitorResponseTimeStats
      summary: Get the stats about the response time
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
        - name: range_in_days
          in: query
          required: false
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMonitorResponseTimeStatsPayload"
        default:
          $ref: "#/components/responses/DefaultError"
  /incidents/{incidentID}:
    get:
      tags:
        - Incidents
      operationId: getIncidentByID
      summary: Get an incident by id
      parameters:
        - name: incidentID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIncidentByByIdPayload"
        default:
          $ref: "#/components/responses/DefaultError"
  /accounts/profile:
    get:
      tags:
        - Accounts
      operationId: getProfileDetails
      summary: Get details about the user currently logged in
      security:
        - BearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProfileDetailsPayload"
        default:
          $ref: "#/components/responses/DefaultError"
  /auth/accounts:
    post:
      tags:
        - Auth
      operationId: createAccount
      summary: Creates a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
      responses:
        "201":
          description: CREATED
        default:
          $ref: "#/components/responses/DefaultError"
  /auth/login:
    post:
      tags:
        - Auth
      operationId: login
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogInRequest"
      responses:
        "200":
          description: SIGNED UP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogInPayload"
        default:
          $ref: "#/components/responses/DefaultError"
components:
  schemas:
    GetProfileDetailsPayload:
      required: [data]
      properties:
        data:
          $ref: "#/components/schemas/User"
    User:
      required: [id, first_name, last_name, email, role, created_at]
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
    ResponseTimeStat:
      required: [value, date, region]
      properties:
        value:
          type: integer
        date:
          type: string
          format: date-time
        region:
          type: string
    GetMonitorResponseTimeStatsPayload:
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ResponseTimeStat"
    EditMonitorRequest:
      required: [endpoint_url, check_interval_in_seconds]
      properties:
        endpoint_url:
          type: string
        check_interval_in_seconds:
          type: integer
    ToggleMonitorPauseRequest:
      required: [pause]
      properties:
        pause:
          type: boolean
    GetAllMonitorsPayload:
      required: [page, per_page, page_count, total_count, data]
      properties:
        page:
          type: integer
        per_page:
          type: integer
        page_count:
          type: integer
        total_count:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: "#/components/schemas/Monitor"
    GetAllMonitorByIdPayload:
      required: [data]
      properties:
        data:
          $ref: "#/components/schemas/Monitor"
    Monitor:
      required: [id, endpoint_url, is_endpoint_up, is_paused, incidents, check_interval_in_seconds, created_at]
      properties:
        id:
          type: string
        endpoint_url:
          type: string
        is_endpoint_up:
          type: boolean
        is_paused:
          type: boolean
        incidents:
          type: array
          items:
            $ref: "#/components/schemas/Incident"
        created_at:
          type: string
          format: date-time
        last_checked_at:
          type: string
          format: date-time
        check_interval_in_seconds:
          type: integer
    Incident:
      required: [id, cause, checked_url, created_at]
      properties:
        id:
          type: string
        checked_url:
          type: string
        cause:
          type: string
        resolved_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    FullIncident:
      allOf:
        - $ref: "#/components/schemas/Incident"
        - type: object
          required: [monitor_id, response_headers, response_status, response_body, request_headers]
          properties:
            monitor_id:
              type: string
            response_headers:
              type: string
            request_headers:
              type: string
            response_status:
              type: integer
            response_body:
              type: string
    LogInPayload:
      required: [token]
      properties:
        token:
          type: string
    LogInRequest:
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    CreateAccountRequest:
      required: [account_name, email, password]
      properties:
        account_name:
          type: string
        email:
          type: string
        password:
          type: string
    CreateMonitorRequest:
      required: [endpoint_url, check_interval_in_seconds]
      properties:
        endpoint_url:
          type: string
        check_interval_in_seconds:
          type: integer
          minimum: 30
    GetIncidentByByIdPayload:
      required: [data]
      properties:
        data:
          $ref: "#/components/schemas/FullIncident"
    GenericResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        message:
          type: string
          description: A description about the error
        error:
          type: string
          description: Error custom error code such as 'email_in_use'
  responses:
    UnauthorizedError:
      description: "Usually causes by an authentication token missing"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    DefaultSuccess:
      description: "Default message when an operation succeeds"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericResponse"
    DefaultError:
      description: "A generic error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
